# service register and discovery
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
spring.cloud.nacos.discovery.namespace=xxxx
spring.cloud.nacos.discovery.group=local

# config server
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
spring.cloud.nacos.config.group=local
spring.cloud.nacos.config.namespace=xxxx

# sentinel dashboard
spring.cloud.sentinel.transport.dashboard=127.0.0.1:8888
# sentinel 与 console 交互的httpserver端口
spring.cloud.sentinel.transport.port=8791
spring.cloud.sentinel.log.dir=logs/sentinel
spring.cloud.sentinel.log.switch-pid=true

# sentinel datasource nacos, more rule see https://sentinelguard.io/zh-cn/docs/basic-api-resource-rule.html
spring.cloud.sentinel.datasource.ds1.file.file=classpath: degraderule.json
spring.cloud.sentinel.datasource.ds1.file.rule-type=flow


spring.cloud.sentinel.datasource.system.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.system.nacos.username=nacos
spring.cloud.sentinel.datasource.system.nacos.password=nacos
spring.cloud.sentinel.datasource.system.nacos.namespace=xxxx
spring.cloud.sentinel.datasource.system.nacos.data-id=xxxx-global-rule-sentinel
spring.cloud.sentinel.datasource.system.nacos.group-id=default
spring.cloud.sentinel.datasource.system.nacos.rule-type=system

spring.cloud.sentinel.datasource.flow.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.flow.nacos.username=nacos
spring.cloud.sentinel.datasource.flow.nacos.password=nacos
spring.cloud.sentinel.datasource.flow.nacos.namespace=xxxx
spring.cloud.sentinel.datasource.flow.nacos.data-id=${spring.application.name}-sentinel
spring.cloud.sentinel.datasource.flow.nacos.group-id=default
spring.cloud.sentinel.datasource.flow.nacos.rule-type=flow

# mysql
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&zeroDateTimeBehavior=convertToNull
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.connection-timeout=2000

# redis
spring.redis.client-type=lettuce
spring.redis.host=127.0.0.1
spring.redis.port=6379
# Redis数据库索引（默认为0）
spring.redis.database=2
# Redis服务器连接密码（默认为空）
spring.redis.password=123456
spring.redis.timeout=1s
# 连接超时时间
spring.redis.connect-timeout=3s
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=3000
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=5s
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=1000
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=200

# mongodb
spring.data.mongodb.host=127.0.0.1
spring.data.mongodb.port=27017
spring.data.mongodb.database=demo
spring.data.mongodb.username=admin
spring.data.mongodb.password=123456
spring.data.mongodb.authentication-database=admin

# 请求验证成功后签名密钥
xxxx.access.sign-key=xxxx
# jwt密码
xxxx.oauth2.jwt.signingKey=123456
# 数据加密密码
xxxx.mysql.secretKey=123456
# 缓存
xxxx.cache.local.enable=true
xxxx.cache.local.entries[0].name=listUser
xxxx.cache.local.entries[0].ttl=1m
xxxx.cache.local.entries[0].capacity=1024
xxxx.cache.remote.enable=true
xxxx.cache.remote.entries[0].name=listUser
xxxx.cache.remote.entries[0].ttl=5m
